#include <bits/stdc++.h>
using namespace std;
#define all(v) (v).begin(), (v).end()
#define debug(x) cout << #x << " = " << x << endl
typedef long long ll;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
inline ll Mod(ll x, ll mod) { return x % mod >= 0 ? x % mod : x % mod + mod; }

template <typename T>
T power(T x, T y, T n)
{
    x %= n;
    T ans = 1;
    while (y > 0)
    {
        if (y & 1)
        {
            ans = ans * x % n;
        }
        x = x * x % n;
        y >>= 1;
    }
    return (ans);
}

template <typename T>
bool check_composite(T n, T a, T d, T s)
{
    // it returns 0 if n is composite else returns 1
    T x = power(a, d, n);
    if (x == 1 || x == n - 1)
        return 0;
    for (int i = 0; i < s - 1; i++)
    {
        x = x * x % n;
        if (x == n - 1)
            return 0;
    }
    return 1;
}

template <typename T>
bool is_prime(T n)
{
    // it returns 1 if n is prime
    if (n == 2 || n == 3)
        return 1;
    T s = 0, d = n - 1;
    while ((d & 1) == 0)
    {
        d >>= 1;
        s++;
    }
    for (ll a : {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37})
    {
        if (n == a)
            return 1;
        if (check_composite(n, a, d, s))
            return 0;
    }
    return 1;
}

vector<ll> primes;

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    primes.reserve(538);
    primes.emplace_back(-1);
    string s = "1";
    string numbers[] = {"0", "1", "2", "3", "4", "5", "6", "7", "8", "9"};
    for (int i = 2; i <= 9; i++)
    {
        s += numbers[i];
        if (is_prime(stoll(s)))
            primes.emplace_back(stoll(s));
        while (next_permutation(all(s)))
        {
            ll p = stoll(s);
            if (is_prime(p))
                primes.emplace_back(p);
        }
    }

    sort(all(primes));
    int t;
    cin >> t;
    while (t--)
    {
        ll n;
        cin >> n;
        int y = upper_bound(all(primes), n) - primes.begin() - 1;
        cout << primes[y] << '\n';
    }
}
